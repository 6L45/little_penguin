#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/miscdevice.h>
#include <linux/semaphore.h>

#define LOGIN "mberengu"

MODULE_LICENSE("GPL");
MODULE_AUTHOR("mberengu");
MODULE_DESCRIPTION("Hey world!");

static ssize_t misc_device_read(struct file *file, char __user *buf, size_t count, loff_t *ppos);
static ssize_t misc_device_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos);

// structure for device
struct	fortytwo {
	struct semaphore	sem;
}	virtual_device;

static const struct file_operations misc_device_fops = {
	.owner = THIS_MODULE,
	.read = misc_device_read,
	.write = misc_device_write
};

static struct miscdevice misc_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name = "fortytwo",
	.fops = &misc_device_fops
};


static ssize_t	misc_device_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
{
	if (copy_to_user(buf, LOGIN, strlen(LOGIN)) != 0)
		return -EFAULT;

	return strlen(LOGIN);
}

static ssize_t	misc_device_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
{
	char	buffer[sizeof(LOGIN)];

	if (strcmp(buf, LOGIN) == 0)
	{
		if (copy_from_user(buffer, buf, sizeof(LOGIN))
				|| memcmp(buffer, LOGIN, sizeof(LOGIN)))
			return -EINVAL;
		return count;
	}
	return -EINVAL;
}

static int __init	misc_device_init(void)
{
	int	ret;

	printk(KERN_INFO ">>>%ld\n", sizeof(LOGIN));
	ret = misc_register(&misc_device);
	if (ret) {
		printk(KERN_ALERT "fortytwo: Failed to register misc device\n");
		return ret;
	}
	printk(KERN_INFO "fortytwo: Misc device registered\n");
	return (ret);
}

static void __exit	misc_device_exit(void)
{
	// Désenregistrement du périphérique misc
	misc_deregister(&misc_device);
	printk(KERN_INFO "fortytwo: Misc device unregistered\n");
}

module_init(misc_device_init);
module_exit(misc_device_exit);

